Web authentication protocols differ from traditional
authentication protocols in part because of the limited in-
terface offered by the Web. The goal is to develop an au-
thentication system by using the protocols and technolo-
gies commonly available in today’s Web browsers and
servers.

Many schemes do involve setting a random session
identifier for each user. This session identifier is used
to access the user’s session information, which is stored
This scheme does not provide a mechanism for se-
cure revocation; that is, ending the user’s session before
10in a database on the server. While such a scheme al-
lows for a client to make customizations (i.e. it is func-
tionally equivalent to the scheme we have presented), it
is potentially subject to guessing attacks on the session
identifier space. If an adversary can successfully guess a
session identifier, the system is broken (see Section 3.3).
Our scheme provides a means for authenticating clients
that is resistant to guessing attacks on session identifiers.

Client state allows the client’s browser to store and
reuse authenticators. However, storage space may be
very limited. In the most limited case, the browser
can only store passwords associated with realms (as in
HTTP Basic authentication [16]). A more flexible form
of storage which is commonly available in browsers is
the cookie [25, 32]. Cookies allow a server store a value
on a client. In subsequent HTTP requests, the client
automatically includes the cookie value. A number of
attributes can control how long cookies are kept and to
which servers they are sent.

Avoid using persistent cookies
A persistent cookie is written to a file on the user’s sys-
tem; an ephemeral or temporary cookie is only stored in
the browser’s memory and disappears when the user exits
the browser. An error in the way the browser or user han-
dles the cookie file may make it accessible over the In-
ternet, exposing the user’s cookies to anyone who knows
where to look. For instance, certain queries to search en-
gines can produce many cookie files accidentally placed
on the Web [18]. If a persistent cookie in a leaked file
contains an authenticator, an adversary can simply copy
the cookie and break into the user’s account. In addition,
if the user accesses the account from a public system (say
at a library or Internet caf ́e) and receives a persistent au-
thentication cookie on that system, any subsequent user
of that system can access the account. For these reasons,
persistent cookies should not be considered private. Do
not store authenticators in persistent cookies.

Limit the lifetime of authenticators
A good design must also gracefully handle the com-
promise of tokens which are designed to be secret. To
limit the amount of damage a leaked authenticator can
cause, limit its lifetime.
For authenticators that are stored in user cookies, do
not rely on the cookie expiration field for secure expira-
tion. Since the client is responsible for enforcing that ex-
piration, a malicious client can set the lifetime arbitrarily.
Netscape users can manually extend these expirations by
simply editing a text file. We were able to indefinitely
extend the lifetime of our WSJ.com cookie authentica-
tor even though WSJ.com set the cookie to expire in
11 hours. This was not extremely alarming, but if an
adversary stole a cookie (as described in Section 3.3),
there would be no way to revoke the adversary’s access.
The problem was compounded because the cookie au-
thenticator remained the same even if a user’s password
changed. This prevented the WSJ.com site from easily
revoking access to a compromised account.

3, 4 warto całość przeczytać, dalej nie wiem
